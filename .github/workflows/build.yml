on: [push, pull_request, workflow_dispatch]

name: CI

env:
  RUSTFLAGS: -D warnings
  RUSTDOCFLAGS: -D warnings

jobs:
  check:
    name: Check
    runs-on: ubuntu-latest
    env:
      CARGO_TERM_COLOR: always
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - name: Run check
        uses: actions-rs/cargo@v1
        with:
          command: check
          args: --all-features

  build:
    runs-on: ${{ matrix.os }}
    env:
      CARGO_TERM_COLOR: always
    strategy:
      fail-fast: false
      matrix:
        include:
        - os: macos-latest
          TARGET: aarch64-apple-darwin
          USE_CROSS: false

        - os: macos-latest
          TARGET: x86_64-apple-darwin
          USE_CROSS: false

        - os: ubuntu-latest
          TARGET: arm-unknown-linux-musleabihf
          USE_CROSS: true

        - os: ubuntu-latest
          TARGET: armv7-unknown-linux-musleabihf
          USE_CROSS: true

        - os: ubuntu-latest
          TARGET: x86_64-unknown-linux-musl
          USE_CROSS: false

        - os: windows-latest
          TARGET: x86_64-pc-windows-msvc
          USE_CROSS: false
          EXTENSION: .exe

        - os: ubuntu-latest
          TARGET: x86_64-unknown-linux-gnu
          USE_CROSS: false

    steps:
    - name: Building ${{ matrix.TARGET }}
      run: echo "${{ matrix.TARGET }}"

    - uses: actions/checkout@master
    - uses: actions-rs/toolchain@v1.0.1
      with:
        toolchain: stable
        target: ${{ matrix.TARGET }}
        override: true

    # Install musl tools for Linux musl targets
    - name: Install musl tools
      if: matrix.TARGET == 'x86_64-unknown-linux-musl'
      run: |
        sudo apt-get update
        sudo apt-get install -y musl-tools

    - name: Run build (with cross)
      if: matrix.USE_CROSS == true
      uses: actions-rs/cargo@v1
      with:
        use-cross: true
        command: build
        args: --verbose --release --target=${{ matrix.TARGET }}

    - name: Run build (without cross)
      if: matrix.USE_CROSS == false
      uses: actions-rs/cargo@v1
      with:
        command: build
        args: --verbose --release --target=${{ matrix.TARGET }}

    - name: Build migration tool (with cross)
      if: matrix.USE_CROSS == true
      uses: actions-rs/cargo@v1
      with:
        use-cross: true
        command: build
        args: --verbose --release --target=${{ matrix.TARGET }} -p migration

    - name: Build migration tool (without cross)
      if: matrix.USE_CROSS == false
      uses: actions-rs/cargo@v1
      with:
        command: build
        args: --verbose --release --target=${{ matrix.TARGET }} -p migration

    - name: Upload main artifact
      uses: actions/upload-artifact@v4
      with:
        name: lunirelust-${{ matrix.TARGET }}
        path: target/${{ matrix.TARGET }}/release/lunirelust${{ matrix.EXTENSION }}

    - name: Upload migration artifact
      uses: actions/upload-artifact@v4
      with:
        name: migration-${{ matrix.TARGET }}
        path: target/${{ matrix.TARGET }}/release/migration${{ matrix.EXTENSION }}

  release:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    needs: [check, build]
    permissions:
      contents: write
      actions: read
      packages: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate changelog
        uses: orhun/git-cliff-action@v4
        id: git-cliff
        with:
          config: cliff.toml
          args: -vv --latest --strip header
        env:
          OUTPUT: CHANGELOG.md

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: List downloaded files
        run: ls -R artifacts

      - name: Prepare release files
        run: |
          mkdir -p release-files

          # Copy main application files with platform-specific names
          for dir in artifacts/lunirelust-*/; do
            platform=$(basename "$dir" | sed 's/lunirelust-//')
            if [ -f "$dir/lunirelust.exe" ]; then
              # Windows platform
              cp "$dir/lunirelust.exe" "release-files/lunirelust-${platform}.exe"
            elif [ -f "$dir/lunirelust" ]; then
              # Unix platforms
              cp "$dir/lunirelust" "release-files/lunirelust-${platform}"
            fi
          done

          # Copy migration tools for all platforms
          for dir in artifacts/migration-*/; do
            platform=$(basename "$dir" | sed 's/migration-//')
            if [ -f "$dir/migration.exe" ]; then
              # Windows platform
              cp "$dir/migration.exe" "release-files/migration-${platform}.exe"
            elif [ -f "$dir/migration" ]; then
              # Unix platforms
              cp "$dir/migration" "release-files/migration-${platform}"
            fi
          done

          ls -la release-files/
          echo "Files to upload:"
          find release-files -type f -exec echo "  - {}" \;

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          body: ${{ steps.git-cliff.outputs.content }}
          files: release-files/*
          draft: false
          prerelease: false
          fail_on_unmatched_files: true
          generate_release_notes: false

  docker:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: release
    steps:
      - uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Docker image
        run: |
          docker build \
            --build-arg TARGET=x86_64-unknown-linux-gnu \
            -t ghcr.io/${{ github.repository }}/lunirelust:latest \
            -t ghcr.io/${{ github.repository }}/lunirelust:${{ github.ref_name }} .

      - name: Push Docker image
        run: |
          docker push ghcr.io/${{ github.repository }}/lunirelust:latest
          docker push ghcr.io/${{ github.repository }}/lunirelust:${{ github.ref_name }}
